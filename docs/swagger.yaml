basePath: /api/v1
definitions:
  ResponseEntity.ServiceError:
    properties:
      description:
        type: string
      error: {}
      time:
        type: string
    type: object
  taskEntity.GetAllExpiredRes:
    properties:
      created_at:
        type: string
      task_id:
        type: string
      title:
        type: string
      user_id:
        type: string
    type: object
  taskEntity.GetTasksByIdRes:
    properties:
      created_at:
        type: string
      description:
        type: string
      end_time:
        type: string
      files:
        items:
          $ref: '#/definitions/taskEntity.TaskFile'
        type: array
      start_time:
        type: string
      status:
        type: string
      task_id:
        type: string
      title:
        type: string
      updated_at:
        type: string
      user_id:
        type: string
      va_id:
        type: string
    type: object
  taskEntity.TaskFile:
    properties:
      file_link:
        type: string
      file_type:
        type: string
    type: object
  userEntity.ChangePasswordReq:
    properties:
      new_password:
        type: string
      old_password:
        type: string
      user_id:
        type: string
    type: object
  userEntity.CreateUserReq:
    properties:
      account_status:
        type: string
      date_created:
        type: string
      date_of_birth:
        type: string
      email:
        type: string
      first_name:
        type: string
      gender:
        enum:
        - Male
        - Female
        type: string
      last_name:
        type: string
      password:
        minLength: 6
        type: string
      payment_status:
        type: string
      phone:
        type: string
      user_id:
        type: string
    required:
    - date_of_birth
    - first_name
    - gender
    - last_name
    - password
    type: object
  userEntity.CreateUserRes:
    properties:
      access_token:
        type: string
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      phone:
        type: string
      refresh_token:
        type: string
      user_id:
        type: string
    type: object
  userEntity.GetByIdRes:
    properties:
      avatar:
        type: string
      date_of_birth:
        type: string
      email:
        type: string
      first_name:
        type: string
      gender:
        type: string
      last_name:
        type: string
      password:
        type: string
      phone:
        type: string
      user_id:
        type: string
    type: object
  userEntity.LoginReq:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - password
    type: object
  userEntity.LoginRes:
    properties:
      access_token:
        type: string
      avatar:
        type: string
      email:
        type: string
      first_name:
        type: string
      gender:
        type: string
      last_name:
        type: string
      phone:
        type: string
      refresh_token:
        type: string
      user_id:
        type: string
    type: object
  userEntity.ProfileImageRes:
    properties:
      avatar:
        type: string
      fileType:
        type: string
      size:
        type: integer
    type: object
  userEntity.ResetPasswordReq:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  userEntity.ResetPasswordRes:
    properties:
      expiry:
        type: string
      token:
        type: string
      token_id:
        type: string
      user_id:
        type: string
    type: object
  userEntity.UpdateUserReq:
    properties:
      account_status:
        type: string
      date_of_birth:
        type: string
      email:
        type: string
      first_name:
        type: string
      gender:
        type: string
      last_name:
        type: string
      payment_status:
        type: string
      phone:
        type: string
    type: object
  userEntity.UpdateUserRes:
    properties:
      date_of_birth:
        type: string
      email:
        type: string
      first_name:
        type: string
      gender:
        type: string
      last_name:
        type: string
      phone:
        type: string
    type: object
  userEntity.UsersRes:
    properties:
      date_created:
        type: string
      date_of_birth:
        type: string
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      phone:
        type: string
      user_id:
        type: string
    type: object
host: api.ticked.hng.tech:2022
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: A web application that helps you to keep your day planned
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Ticked
  version: "1.0"
paths:
  /assign-va/{vaId}:
    post:
      consumes:
      - application/json
      description: Assing VA to User route
      parameters:
      - description: VA Id
        in: path
        name: vaId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Ok
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ResponseEntity.ServiceError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ResponseEntity.ServiceError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ResponseEntity.ServiceError'
      security:
      - ApiKeyAuth: []
      summary: Assign VA to a User
      tags:
      - Users
  /reset-password-token:
    post:
      consumes:
      - application/json
      description: Reset password
      parameters:
      - description: Token
        in: query
        name: token
        required: true
        type: string
      - description: User Id
        in: query
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ResponseEntity.ServiceError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ResponseEntity.ServiceError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ResponseEntity.ServiceError'
      summary: Check the provided token and reset the user's password
      tags:
      - Users
  /task/{taskId}:
    get:
      consumes:
      - application/json
      description: Get a particular task
      parameters:
      - description: Task Id
        in: path
        name: taskId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/taskEntity.GetTasksByIdRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ResponseEntity.ServiceError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ResponseEntity.ServiceError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ResponseEntity.ServiceError'
      security:
      - BasicAuth: []
      summary: Get a single task
      tags:
      - Tasks
  /task/expired:
    get:
      consumes:
      - application/json
      description: Get all expired task
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/taskEntity.GetAllExpiredRes'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ResponseEntity.ServiceError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ResponseEntity.ServiceError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ResponseEntity.ServiceError'
      security:
      - BasicAuth: []
      summary: Get all expired tasks
      tags:
      - Tasks
  /user:
    get:
      consumes:
      - application/json
      description: Get all users route
      parameters:
      - description: page
        in: query
        name: page
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/userEntity.UsersRes'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ResponseEntity.ServiceError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ResponseEntity.ServiceError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ResponseEntity.ServiceError'
      security:
      - ApiKeyAuth: []
      summary: Get all users in the database
      tags:
      - Users
    post:
      consumes:
      - application/json
      description: Register route
      parameters:
      - description: Signup Details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/userEntity.CreateUserReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/userEntity.CreateUserRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ResponseEntity.ServiceError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ResponseEntity.ServiceError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ResponseEntity.ServiceError'
      summary: Register route
      tags:
      - Users
  /user/{userId}:
    delete:
      consumes:
      - application/json
      description: Delete route
      parameters:
      - description: User Id
        in: path
        name: userId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ResponseEntity.ServiceError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ResponseEntity.ServiceError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ResponseEntity.ServiceError'
      security:
      - ApiKeyAuth: []
      summary: Delete a user from the database
      tags:
      - Users
    get:
      consumes:
      - application/json
      description: Get user route
      parameters:
      - description: User Id
        in: path
        name: userId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/userEntity.GetByIdRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ResponseEntity.ServiceError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ResponseEntity.ServiceError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ResponseEntity.ServiceError'
      security:
      - ApiKeyAuth: []
      summary: Get a specific user
      tags:
      - Users
    put:
      consumes:
      - application/json
      description: Register route
      parameters:
      - description: User Id
        in: path
        name: userId
        required: true
        type: string
      - description: Update User Details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/userEntity.UpdateUserReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/userEntity.UpdateUserRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ResponseEntity.ServiceError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ResponseEntity.ServiceError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ResponseEntity.ServiceError'
      security:
      - ApiKeyAuth: []
      summary: Update a user profile
      tags:
      - Users
  /user/{userId}/change-password:
    put:
      consumes:
      - application/json
      description: Change password route
      parameters:
      - description: User Id
        in: path
        name: userId
        required: true
        type: string
      - description: New password
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/userEntity.ChangePasswordReq'
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ResponseEntity.ServiceError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ResponseEntity.ServiceError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ResponseEntity.ServiceError'
      security:
      - ApiKeyAuth: []
      summary: Change a user password
      tags:
      - Users
  /user/login:
    post:
      consumes:
      - application/json
      description: Login to the server
      parameters:
      - description: Login Details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/userEntity.LoginReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/userEntity.LoginRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ResponseEntity.ServiceError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ResponseEntity.ServiceError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ResponseEntity.ServiceError'
      summary: Provide email and password to be logged in
      tags:
      - Users
  /user/reset-password:
    post:
      consumes:
      - application/json
      description: Generate token
      parameters:
      - description: Input your email
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/userEntity.ResetPasswordReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/userEntity.ResetPasswordRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ResponseEntity.ServiceError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ResponseEntity.ServiceError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ResponseEntity.ServiceError'
      summary: Generate a token to reset users password
      tags:
      - Users
  /user/upload:
    post:
      consumes:
      - multipart/form-data
      description: Upload image route
      parameters:
      - description: Update profile picture
        in: formData
        name: Upload-Image
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/userEntity.ProfileImageRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ResponseEntity.ServiceError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ResponseEntity.ServiceError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ResponseEntity.ServiceError'
      security:
      - BasicAuth: []
      summary: Update the current user profile image
      tags:
      - Users
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorisation
    type: apiKey
swagger: "2.0"
